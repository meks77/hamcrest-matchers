/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    `java-library`
    id("pl.allegro.tech.build.axion-release") version "1.10.0"
    id("org.sonarqube") version "2.7"
    jacoco
    `maven-publish`
    signing
}

group="at.meks"
version = scmVersion.version

tasks.register<Jar>("sourcesJar") {
    from(sourceSets.main.get().allJava)
    archiveClassifier.set("sources")
}

tasks.register<Jar>("javadocJar") {
    from(tasks.javadoc.get().destinationDir)
    archiveClassifier.set("javadoc")
}

publishing {
    repositories {
        maven {
            publications {
                create<MavenPublication>("javaMaven") {
                    from(components["java"])
                    artifact(tasks["sourcesJar"])
                    artifact(tasks["javadocJar"])
                    pom {
                        name.set("Hamcrest-Matchers")
                        description.set("a library containing hamcrest matchers")
                        url.set("https://github.com/meks77/hamcrest-matchers")
                        licenses {
                            license {
                                name.set("The Apache License, Version 2.0")
                                url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                            }
                        }
                        developers {
                            developer {
                                name.set("Markus Hager")
                                url.set("https://github.com/meks77")
                            }
                        }

                        scm {
                            connection.set("scm:git:https://github.com/meks77/hamcrest-matchers.git")
                            developerConnection.set("scm:git:https://github.com/meks77/hamcrest-matchers.git")
                            url.set("https://github.com/meks77/hamcrest-matchers")
                        }
                    }
                }
            }
            val nexusUrl: String by project
            val releasesRepoUrl = "${nexusUrl}/service/local/staging/deploy/maven2/"
            val snapshotsRepoUrl = "${nexusUrl}/content/repositories/snapshots/"
            val nexusUsername: String by project
            val nexusPassword: String by project
            url = uri(if (version.toString().endsWith("SNAPSHOT")) snapshotsRepoUrl else releasesRepoUrl)
            credentials {
                username = nexusUsername
                password = nexusPassword
            }
        }
    }

}

signing {
    val signingKeyId: String by project
    val signingPassword: String by project
    val signingSecretKeyRingFile: String by project
    extra["signing.keyId"] = signingKeyId
    extra["signing.secretKeyRingFile"] = signingSecretKeyRingFile
    extra["signing.password"] = signingPassword
    sign(publishing.publications["javaMaven"])
}

tasks.jacocoTestReport {
    reports {
        xml.isEnabled = true
        csv.isEnabled = false
    }
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("org.hamcrest:hamcrest-core:2.1")

    // Use JUnit test framework
    testImplementation("junit:junit:4.12")
    testImplementation("io.cucumber:cucumber-java8:4.2.6")
    testImplementation("io.cucumber:cucumber-junit:4.2.6")
    testImplementation("org.easytesting:fest-assert-core:2.0M10")
}
